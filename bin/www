#! /usr/bin/env node

'use strict'

const http = require('http')
const debug = require('debug')('isomorphic-react:server')
const app = require('../app/server')
const config = require('../config')
const pkg = require('../package.json')

const port = normalizePort(config.port)
app.set('port', port)

const server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort(val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/*
 * Event listener for HTTP server "error" event
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/*
 * Event listener for HTTP server "listening" event
 */

function onListening() {
  const addr = server.address()
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug(`${pkg.name} is listening on ${bind}`)
  console.log(`${pkg.name} is listening on ${bind}`)
}
